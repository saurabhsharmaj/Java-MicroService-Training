apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
#prometheus-config.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'spring-boot-app'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['host.docker.internal:30506']  # If app is on host, and Prometheus in Docker
            labels:
              application: 'api-tutorial'

---
#loki-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: observability
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    common:
      instance_addr: 0.0.0.0
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2020-10-24
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: index_
            period: 24h

    ruler:
      alertmanager_url: http://host.docker.internal:9093

    # By default, Loki will send anonymous, but uniquely-identifiable usage and configuration
    # analytics to Grafana Labs. These statistics are sent to https://stats.grafana.org/
    #
    # Statistics help us better understand how Loki is used, and they show us performance
    # levels for most users. This helps us prioritize features and documentation.
    # For more information on what's sent, look at
    # https://github.com/grafana/loki/blob/main/pkg/usagestats/stats.go
    # Refer to the buildReport method to see what goes into a report.
    #
    # If you would like to disable reporting, uncomment the following lines:
    #analytics:
    #  reporting_enabled: false

---
#Tempo-config.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
  namespace: observability
data:
  tempo.yaml: |
    stream_over_http_enabled: true
    server:
      http_listen_port: 3200
      log_level: info


    cache:
      background:
        writeback_goroutines: 5
      caches:
      - roles:
        - frontend-search  
        memcached: 
          addresses: dns+memcached:11211

    query_frontend:
      search:
        duration_slo: 5s
        throughput_bytes_slo: 1.073741824e+09
        metadata_slo:
            duration_slo: 5s
            throughput_bytes_slo: 1.073741824e+09
      trace_by_id:
        duration_slo: 100ms
      metrics:
        max_duration: 200h                # maximum duration of a metrics query, increase for local setups
        query_backend_after: 5m
        duration_slo: 5s
        throughput_bytes_slo: 1.073741824e+09

    distributor:
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: "0.0.0.0:4317"
            http:
              endpoint: "0.0.0.0:4318"

    ingester:
      max_block_duration: 5m               # cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally

    compactor:
      compaction:
        block_retention: 720h                # overall Tempo trace retention. set for demo purposes

    metrics_generator:
      registry:
        external_labels:
          source: tempo
          cluster: docker-compose
      storage:
        path: /var/tempo/generator/wal
        remote_write:
          - url: http://host.docker.internal:9090/api/v1/write
            send_exemplars: true
      traces_storage:
        path: /var/tempo/generator/traces
      processor:
        local_blocks:
          filter_server_spans: false
          flush_to_storage: true

    storage:
      trace:
        backend: local                     # backend configuration to use
        wal:
          path: /var/tempo/wal             # where to store the wal locally
        local:
          path: /var/tempo/blocks

    overrides:
      defaults:
        metrics_generator:
          processors: [service-graphs, span-metrics, local-blocks] # enables metrics generator
          generate_native_histograms: both # enables native histograms for all traces

---
#grafana-provisioning.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://host.docker.internal:9090
        isDefault: true
        uid: DS_PROMETHEUS
      - name: Loki
        type: loki
        access: proxy
        url: http://host.docker.internal:3100
        jsonData:
          tracesToLogs:
            datasourceUid: 'loki'  
      - name: Tempo
        type: tempo
        access: proxy
        url: http://host.docker.internal:3200
        jsonData:
          tracesToLogs:
            datasourceUid: 'loki'
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        folder: ''
        type: file
        options:
          path: /etc/grafana/provisioning/dashboards


---
#Deployments and Services Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
      volumes:
        - name: config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: observability
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
#Deployments and Services Loki
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki:latest
          args: ["-config.file=/etc/loki/loki.yaml"]
          ports:
            - containerPort: 3100
          volumeMounts:
            - name: config
              mountPath: /etc/loki/loki.yaml
              subPath: loki.yaml
      volumes:
        - name: config
          configMap:
            name: loki-config
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: observability
spec:
  selector:
    app: loki
  ports:
    - port: 3100
      targetPort: 3100

---
#Deployments and Services Tempo
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
    spec:
      containers:
        - name: tempo
          image: grafana/tempo:latest
          args: ["-config.file=/etc/tempo.yaml"]
          ports:
            - containerPort: 4317
            - containerPort: 3200
          volumeMounts:
            - name: config
              mountPath: /etc/tempo.yaml
              subPath: tempo.yaml
      volumes:
        - name: config
          configMap:
            name: tempo-config
---
apiVersion: v1
kind: Service
metadata:
  name: tempo
  namespace: observability
spec:
  selector:
    app: tempo
  ports:
    - port: 4317
      targetPort: 4317
    - port: 3200
      targetPort: 3200
---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true

      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100

      - name: Tempo
        type: tempo
        access: proxy
        url: http://tempo:3200
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: observability
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: default
        orgId: 1
        folder: ""
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
          volumeMounts:
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards
      volumes:
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      nodePort: 32000
